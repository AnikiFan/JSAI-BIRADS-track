Timer unit: 1e-09 s

Total time: 2.06145 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: __init__ at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def __init__(self,model_folder_path,format='pt'):
    18         1      39480.0  39480.0      0.0          info("init test")
    19         1 1699071260.0    2e+09     82.4          self.seg_model = FCBFormer().to('cuda') # 实例化FCB模型
    20         1  211741075.0    2e+08     10.3          self.seg_model.load_state_dict(torch.load(os.path.join(model_folder_path,'segmentation','FCB_checkpoint.pt'))) # 加载预训练模型
    21                                                   # 自定义图像转换
    22         2      27008.0  13504.0      0.0          self.transform = transforms.Compose([
    23                                                       # transforms.ToTensor(),
    24         1     132876.0 132876.0      0.0              transforms.Resize((352,352),antialias=True),
    25         1      45645.0  45645.0      0.0              transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))
    26                                                   ])
    27         1    9405319.0    9e+06      0.5          self.seg_model.eval()
    28                                           
    29                                           
    30                                                   # 实例化cla所需模型
    31         1     723204.0 723204.0      0.0          self.cla_full = YOLO(os.path.join(model_folder_path,'cla','full.'+format),task=TASK)
    32         1  134853796.0    1e+08      6.5          self.cla_full(**YOLO_PARAMS)
    33         1     534134.0 534134.0      0.0          self.cla_0_1 = YOLO(os.path.join(model_folder_path,'cla','full_2_3.'+format),task=TASK)
    34         1     394253.0 394253.0      0.0          self.cla_01_2345 = YOLO(os.path.join(model_folder_path,'cla','full_23_4A4B4C5.'+format),task=TASK)
    35         1     474313.0 474313.0      0.0          self.cla_2_345 = YOLO(os.path.join(model_folder_path,'cla','full_4A_4B4C5.'+format),task=TASK)
    36         1     375916.0 375916.0      0.0          self.cla_3_45 = YOLO(os.path.join(model_folder_path,'cla','full_4B_4C5.'+format),task=TASK)
    37         1     365972.0 365972.0      0.0          self.cla_4_5 = YOLO(os.path.join(model_folder_path,'cla','full_4C_5.'+format),task=TASK)
    38                                           
    39                                                   # 实例化boudary特征所需模型
    40         1     365944.0 365944.0      0.0          self.boundary_full = YOLO(os.path.join(model_folder_path,'boundary','full.'+format),task=TASK)
    41         1     362156.0 362156.0      0.0          self.boundary_box = YOLO(os.path.join(model_folder_path,'boundary','box.'+format),task=TASK)
    42                                           
    43                                                   # 实例化calcification特征所需模型
    44         1     361538.0 361538.0      0.0          self.calcification_full = YOLO(os.path.join(model_folder_path,'calcification','full.'+format),task=TASK)
    45         1     359741.0 359741.0      0.0          self.calcification_box = YOLO(os.path.join(model_folder_path,'calcification','box.'+format),task=TASK)
    46         1     363238.0 363238.0      0.0          self.calcification_masked = YOLO(os.path.join(model_folder_path,'calcification','masked.'+format),task=TASK)
    47                                           
    48                                                   # 实例化direction特征所需模型
    49         1     364565.0 364565.0      0.0          self.direction_full = YOLO(os.path.join(model_folder_path,'direction','full.'+format),task=TASK)
    50                                           
    51                                                   # 实例化shape特征所需模型
    52         1     359290.0 359290.0      0.0          self.shape_full = YOLO(os.path.join(model_folder_path,'shape','full.'+format),task=TASK)
    53         1     359008.0 359008.0      0.0          self.shape_box = YOLO(os.path.join(model_folder_path,'shape','box.'+format),task=TASK)
    54         1     355348.0 355348.0      0.0          self.shape_masked = YOLO(os.path.join(model_folder_path,'shape','masked.'+format),task=TASK)
    55         1      14393.0  14393.0      0.0          info("finish init")

Total time: 11.401 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: cla_predict at line 58

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    58                                               @torch.no_grad()
    59                                               @profile
    60                                               def cla_predict(self,image):
    61       671    3555795.0   5299.2      0.0          info("cla_predict开始")
    62       671    1628280.0   2426.6      0.0          info("cla读取图像")
    63       671 2110714402.0    3e+06     18.5          origin = cv2.imread(image)
    64       671 4193711444.0    6e+06     36.8          origin = self.cla_full.predictor.preprocess([origin])
    65       671    4776862.0   7119.0      0.0          info("cla_full")
    66       671  871550958.0    1e+06      7.6          cla_full = self.cla_full(origin,**YOLO_PARAMS)[0].probs.data
    67       671    3587622.0   5346.7      0.0          info("cla_01_2345")
    68       671  814999465.0    1e+06      7.1          cla_01_2345__01,cla_01_2345__2345 = self.cla_01_2345(origin,**YOLO_PARAMS)[0].probs.data
    69       671    3539539.0   5275.0      0.0          info("cla_0_1")
    70       671  802967131.0    1e+06      7.0          cla_0_1__0,cla_0_1__1 = self.cla_0_1(origin,**YOLO_PARAMS)[0].probs.data
    71       671    3528618.0   5258.7      0.0          info("cla_2_345")
    72       671  795315082.0    1e+06      7.0          cla_2_345__2,cla_2_345__345 = self.cla_2_345(origin,**YOLO_PARAMS)[0].probs.data
    73       671    3466463.0   5166.1      0.0          info("cla_3_45")
    74       671  780583623.0    1e+06      6.8          cla_3_45__3,cla_3_45__45 = self.cla_3_45(origin,**YOLO_PARAMS)[0].probs.data
    75       671    3474320.0   5177.8      0.0          info("cla_4_5")
    76       671  795124922.0    1e+06      7.0          cla_4_5__4,cla_4_5__5 = self.cla_4_5(origin,**YOLO_PARAMS)[0].probs.data
    77       671    3480977.0   5187.7      0.0          info("bayes")
    78      2013   63264893.0  31428.2      0.6          prob_result = torch.Tensor([
    79       671   11186195.0  16670.9      0.1          cla_01_2345__01 * cla_0_1__0,
    80       671    4932999.0   7351.7      0.0          cla_01_2345__01 * cla_0_1__1,
    81       671    4429204.0   6600.9      0.0          cla_01_2345__2345 * cla_2_345__2,
    82       671    9165172.0  13659.0      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__3,
    83       671   13224311.0  19708.4      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__45 * cla_4_5__4,
    84       671   13063759.0  19469.1      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__45 * cla_4_5__5,
    85       671   14314091.0  21332.5      0.1          ]).to('cuda')
    86       671    2995089.0   4463.6      0.0          info("ensemble cla")
    87       671   67223196.0 100183.6      0.6          result = Tester.majority_ensemble([cla_full,prob_result])
    88       671    1162767.0   1732.9      0.0          return result

Total time: 104.633 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: fea_predict at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                               @torch.no_grad()
    92                                               @profile
    93                                               def fea_predict(self, image):
    94       983    6176511.0   6283.3      0.0          info("fea_predict开始")
    95       983    2701586.0   2748.3      0.0          info("fea读取图像")
    96       983 2809247838.0    3e+06      2.7          origin = cv2.imread(image)
    97       983 1302688877.0    1e+06      1.2          origin = torch.Tensor(origin).to("cuda").permute(2,0,1)
    98       983    7721397.0   7854.9      0.0          info("removeFrame")
    99       983 4738062105.0    5e+06      4.5          top,left,h,w = removeFrame(origin)
   100       983   14266592.0  14513.3      0.0          cropped = origin[:,top:top+h,left:left+w]
   101       983        5e+10    5e+07     50.2          heatmap = self.seg_model(self.transform(cropped/255).unsqueeze(0).to('cuda')).sigmoid() # 生成热图
   102       983 3377583745.0    3e+06      3.2          origin = origin.permute(1,2,0).cpu().numpy().astype(np.uint8)
   103       983 1145516157.0    1e+06      1.1          cropped = cropped.permute(1,2,0).cpu().numpy().astype(np.uint8)
   104       983    8928949.0   9083.4      0.0          info("heatmap插值")
   105       983  373232376.0 379687.1      0.4          heatmap = F.interpolate(heatmap,size=(h,w),mode='bilinear',align_corners=False).cpu()
   106       983    6498729.0   6611.1      0.0          info("mask")
   107       983 2245892413.0    2e+06      2.1          mask = np_make_mask(heatmap)
   108       983    6038195.0   6142.6      0.0          info("box")
   109       983 1778261819.0    2e+06      1.7          box = np_make_box_map(cropped,cv2.cvtColor(mask,cv2.COLOR_RGB2GRAY))
   110       983    5423754.0   5517.6      0.0          info("masked")
   111       983 7751360903.0    8e+06      7.4          masked = np_make_masked(heatmap,cropped)
   112                                           
   113       983 5637623034.0    6e+06      5.4          origin = self.cla_full.predictor.preprocess([origin])
   114       983 2572271589.0    3e+06      2.5          box = self.cla_full.predictor.preprocess([box])
   115       983 4557599623.0    5e+06      4.4          masked = self.cla_full.predictor.preprocess([masked])
   116                                           
   117       983    6839830.0   6958.1      0.0          info("boundary_full")
   118       983 1716740711.0    2e+06      1.6          boundary_full = self.boundary_full(origin,**YOLO_PARAMS)[0].probs.data
   119       983    5450375.0   5544.6      0.0          info("boundary_box")
   120       983 1599282424.0    2e+06      1.5          boundary_box = self.boundary_box(box,**YOLO_PARAMS)[0].probs.data
   121       983    5320124.0   5412.1      0.0          info("ensemble boundary")
   122       983   87302807.0  88812.6      0.1          boundary = Tester.max_ensemble([boundary_full,boundary_box])
   123                                           
   124       983    3670820.0   3734.3      0.0          info("calcification_full")
   125       983 1552763764.0    2e+06      1.5          calcification_full = self.calcification_full(origin,**YOLO_PARAMS)[0].probs.data
   126       983    5012684.0   5099.4      0.0          info("calcification_box")
   127       983 1542704915.0    2e+06      1.5          calcification_box = self.calcification_box(box,**YOLO_PARAMS)[0].probs.data
   128       983    5027083.0   5114.0      0.0          info("calcification_masked")
   129       983 1456692847.0    1e+06      1.4          calcification_masked = self.calcification_masked(masked,**YOLO_PARAMS)[0].probs.data
   130       983    5130334.0   5219.1      0.0          info("ensemble calcification")
   131       983  107619196.0 109480.4      0.1          calcification = Tester.majority_ensemble([calcification_full,calcification_box,calcification_masked])
   132                                           
   133       983    3943002.0   4011.2      0.0          info("direction_full")
   134       983 1268864555.0    1e+06      1.2          direction = self.direction_full(origin,**YOLO_PARAMS)[0].probs.top1
   135                                           
   136       983    5191818.0   5281.6      0.0          info("shape_full")
   137       983 1438449755.0    1e+06      1.4          shape_full = self.shape_full(origin,**YOLO_PARAMS)[0].probs.data
   138       983    4972172.0   5058.2      0.0          info("shape_box")
   139       983 1409455736.0    1e+06      1.3          shape_box = self.shape_box(box,**YOLO_PARAMS)[0].probs.data
   140       983    5001925.0   5088.4      0.0          info("shape_masked")
   141       983 1420391227.0    1e+06      1.4          shape_masked = self.shape_masked(masked,**YOLO_PARAMS)[0].probs.data
   142                                           
   143                                           
   144       983    5048569.0   5135.9      0.0          info("ensemble shape")
   145       983   79739856.0  81118.9      0.1          shape = Tester.average_ensemble([shape_full,shape_box,shape_masked])
   146                                                   
   147       983    3155082.0   3209.6      0.0          return boundary,calcification,direction,shape

  2.06 seconds - /root/autodl-tmp/testB/project/model/Tester.py:16 - __init__
 11.40 seconds - /root/autodl-tmp/testB/project/model/Tester.py:58 - cla_predict
104.63 seconds - /root/autodl-tmp/testB/project/model/Tester.py:91 - fea_predict
