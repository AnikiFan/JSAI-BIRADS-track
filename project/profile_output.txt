Timer unit: 1e-09 s

Total time: 2.08687 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: __init__ at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def __init__(self,model_folder_path,format='pt'):
    18         1      40147.0  40147.0      0.0          info("init test")
    19         1 1704098484.0    2e+09     81.7          self.seg_model = FCBFormer().to('cuda') # 实例化FCB模型
    20         1  216482432.0    2e+08     10.4          self.seg_model.load_state_dict(torch.load(os.path.join(model_folder_path,'segmentation','FCB_checkpoint.pt'))) # 加载预训练模型
    21                                                   # 自定义图像转换
    22         2      26822.0  13411.0      0.0          self.transform = transforms.Compose([
    23         1      29161.0  29161.0      0.0              transforms.ToTensor(),
    24         1     113189.0 113189.0      0.0              transforms.Resize((352,352),antialias=True),
    25         1      41556.0  41556.0      0.0              transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))
    26                                                   ])
    27         1    9467537.0    9e+06      0.5          self.seg_model.eval()
    28                                           
    29                                           
    30                                                   # 实例化cla所需模型
    31         1     727138.0 727138.0      0.0          self.cla_full = YOLO(os.path.join(model_folder_path,'cla','full.'+format),task=TASK)
    32         1  150310621.0    2e+08      7.2          self.cla_full(**YOLO_PARAMS)
    33         1     532959.0 532959.0      0.0          self.cla_0_1 = YOLO(os.path.join(model_folder_path,'cla','full_2_3.'+format),task=TASK)
    34         1     397788.0 397788.0      0.0          self.cla_01_2345 = YOLO(os.path.join(model_folder_path,'cla','full_23_4A4B4C5.'+format),task=TASK)
    35         1     491668.0 491668.0      0.0          self.cla_2_345 = YOLO(os.path.join(model_folder_path,'cla','full_4A_4B4C5.'+format),task=TASK)
    36         1     386128.0 386128.0      0.0          self.cla_3_45 = YOLO(os.path.join(model_folder_path,'cla','full_4B_4C5.'+format),task=TASK)
    37         1     376259.0 376259.0      0.0          self.cla_4_5 = YOLO(os.path.join(model_folder_path,'cla','full_4C_5.'+format),task=TASK)
    38                                           
    39                                                   # 实例化boudary特征所需模型
    40         1     371697.0 371697.0      0.0          self.boundary_full = YOLO(os.path.join(model_folder_path,'boundary','full.'+format),task=TASK)
    41         1     370670.0 370670.0      0.0          self.boundary_box = YOLO(os.path.join(model_folder_path,'boundary','box.'+format),task=TASK)
    42                                           
    43                                                   # 实例化calcification特征所需模型
    44         1     373159.0 373159.0      0.0          self.calcification_full = YOLO(os.path.join(model_folder_path,'calcification','full.'+format),task=TASK)
    45         1     368784.0 368784.0      0.0          self.calcification_box = YOLO(os.path.join(model_folder_path,'calcification','box.'+format),task=TASK)
    46         1     379775.0 379775.0      0.0          self.calcification_masked = YOLO(os.path.join(model_folder_path,'calcification','masked.'+format),task=TASK)
    47                                           
    48                                                   # 实例化direction特征所需模型
    49         1     368637.0 368637.0      0.0          self.direction_full = YOLO(os.path.join(model_folder_path,'direction','full.'+format),task=TASK)
    50                                           
    51                                                   # 实例化shape特征所需模型
    52         1     369754.0 369754.0      0.0          self.shape_full = YOLO(os.path.join(model_folder_path,'shape','full.'+format),task=TASK)
    53         1     364488.0 364488.0      0.0          self.shape_box = YOLO(os.path.join(model_folder_path,'shape','box.'+format),task=TASK)
    54         1     362711.0 362711.0      0.0          self.shape_masked = YOLO(os.path.join(model_folder_path,'shape','masked.'+format),task=TASK)
    55         1      14181.0  14181.0      0.0          info("finish init")

Total time: 11.3458 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: cla_predict at line 58

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    58                                               @torch.no_grad()
    59                                               @profile
    60                                               def cla_predict(self,image):
    61       671    3366729.0   5017.5      0.0          info("cla_predict开始")
    62       671    1570126.0   2340.0      0.0          info("cla读取图像")
    63       671 2099597492.0    3e+06     18.5          origin = cv2.imread(image)
    64       671 4165595032.0    6e+06     36.7          origin = self.cla_full.predictor.preprocess([origin])
    65       671    4712906.0   7023.7      0.0          info("cla_full")
    66       671  873013208.0    1e+06      7.7          cla_full = self.cla_full(origin,**YOLO_PARAMS)[0].probs.data
    67       671    3578558.0   5333.2      0.0          info("cla_01_2345")
    68       671  810734456.0    1e+06      7.1          cla_01_2345__01,cla_01_2345__2345 = self.cla_01_2345(origin,**YOLO_PARAMS)[0].probs.data
    69       671    3500046.0   5216.2      0.0          info("cla_0_1")
    70       671  802159414.0    1e+06      7.1          cla_0_1__0,cla_0_1__1 = self.cla_0_1(origin,**YOLO_PARAMS)[0].probs.data
    71       671    3464536.0   5163.2      0.0          info("cla_2_345")
    72       671  791226522.0    1e+06      7.0          cla_2_345__2,cla_2_345__345 = self.cla_2_345(origin,**YOLO_PARAMS)[0].probs.data
    73       671    3438105.0   5123.9      0.0          info("cla_3_45")
    74       671  778856435.0    1e+06      6.9          cla_3_45__3,cla_3_45__45 = self.cla_3_45(origin,**YOLO_PARAMS)[0].probs.data
    75       671    3449712.0   5141.2      0.0          info("cla_4_5")
    76       671  790693957.0    1e+06      7.0          cla_4_5__4,cla_4_5__5 = self.cla_4_5(origin,**YOLO_PARAMS)[0].probs.data
    77       671    3434769.0   5118.9      0.0          info("bayes")
    78      2013   63340062.0  31465.5      0.6          prob_result = torch.Tensor([
    79       671   11331772.0  16887.9      0.1          cla_01_2345__01 * cla_0_1__0,
    80       671    5027973.0   7493.3      0.0          cla_01_2345__01 * cla_0_1__1,
    81       671    4331966.0   6456.0      0.0          cla_01_2345__2345 * cla_2_345__2,
    82       671    9017341.0  13438.7      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__3,
    83       671   12864864.0  19172.7      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__45 * cla_4_5__4,
    84       671   12638945.0  18836.0      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__45 * cla_4_5__5,
    85       671   14127840.0  21054.9      0.1          ]).to('cuda')
    86       671    2879391.0   4291.2      0.0          info("ensemble cla")
    87       671   66665496.0  99352.5      0.6          result = Tester.majority_ensemble([cla_full,prob_result])
    88       671    1154798.0   1721.0      0.0          return result

Total time: 102.583 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: fea_predict at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                               @torch.no_grad()
    92                                               @profile
    93                                               def fea_predict(self, image):
    94       983    5709857.0   5808.6      0.0          info("fea_predict开始")
    95       983    2498060.0   2541.3      0.0          info("fea读取图像")
    96       983 2833938966.0    3e+06      2.8          origin = cv2.imread(image)
    97       983 1268186764.0    1e+06      1.2          origin = torch.Tensor(origin).to("cuda").permute(2,0,1)
    98       983    6978044.0   7098.7      0.0          info("removeFrame")
    99       983 4701301380.0    5e+06      4.6          top,left,h,w = removeFrame(origin)
   100       983 1825871635.0    2e+06      1.8          origin = origin.permute(1,2,0).cpu().numpy().astype(np.uint8)
   101       983    3094321.0   3147.8      0.0          cropped = origin[top:top+h,left:left+w]
   102       983        5e+10    5e+07     50.6          heatmap = self.seg_model(self.transform(cropped).unsqueeze(0).to('cuda')).sigmoid() # 生成热图
   103       983    5586161.0   5682.8      0.0          info("heatmap插值")
   104       983 2003572078.0    2e+06      2.0          heatmap = F.interpolate(heatmap,size=(h,w),mode='bilinear',align_corners=False).cpu()
   105       983    6300152.0   6409.1      0.0          info("mask")
   106       983 2312417099.0    2e+06      2.3          mask = np_make_mask(heatmap)
   107       983    5538075.0   5633.9      0.0          info("box")
   108       983 1768596482.0    2e+06      1.7          box = np_make_box_map(cropped,cv2.cvtColor(mask,cv2.COLOR_RGB2GRAY))
   109       983    5013483.0   5100.2      0.0          info("masked")
   110       983 8088989715.0    8e+06      7.9          masked = np_make_masked(heatmap,cropped)
   111                                           
   112       983 5593696650.0    6e+06      5.5          origin = self.cla_full.predictor.preprocess([origin])
   113       983 2504010978.0    3e+06      2.4          box = self.cla_full.predictor.preprocess([box])
   114       983 4464108576.0    5e+06      4.4          masked = self.cla_full.predictor.preprocess([masked])
   115                                           
   116       983    6369256.0   6479.4      0.0          info("boundary_full")
   117       983 1661115971.0    2e+06      1.6          boundary_full = self.boundary_full(origin,**YOLO_PARAMS)[0].probs.data
   118       983    5086697.0   5174.7      0.0          info("boundary_box")
   119       983 1548387793.0    2e+06      1.5          boundary_box = self.boundary_box(box,**YOLO_PARAMS)[0].probs.data
   120       983    4977967.0   5064.1      0.0          info("ensemble boundary")
   121       983   83220457.0  84659.7      0.1          boundary = Tester.max_ensemble([boundary_full,boundary_box])
   122                                           
   123       983    3498259.0   3558.8      0.0          info("calcification_full")
   124       983 1510086812.0    2e+06      1.5          calcification_full = self.calcification_full(origin,**YOLO_PARAMS)[0].probs.data
   125       983    4772628.0   4855.2      0.0          info("calcification_box")
   126       983 1493821769.0    2e+06      1.5          calcification_box = self.calcification_box(box,**YOLO_PARAMS)[0].probs.data
   127       983    4782139.0   4864.8      0.0          info("calcification_masked")
   128       983 1399719239.0    1e+06      1.4          calcification_masked = self.calcification_masked(masked,**YOLO_PARAMS)[0].probs.data
   129       983    4856752.0   4940.7      0.0          info("ensemble calcification")
   130       983  103240106.0 105025.5      0.1          calcification = Tester.majority_ensemble([calcification_full,calcification_box,calcification_masked])
   131                                           
   132       983    3639775.0   3702.7      0.0          info("direction_full")
   133       983 1210522863.0    1e+06      1.2          direction = self.direction_full(origin,**YOLO_PARAMS)[0].probs.top1
   134                                           
   135       983    4911770.0   4996.7      0.0          info("shape_full")
   136       983 1372638196.0    1e+06      1.3          shape_full = self.shape_full(origin,**YOLO_PARAMS)[0].probs.data
   137       983    4736380.0   4818.3      0.0          info("shape_box")
   138       983 1364104908.0    1e+06      1.3          shape_box = self.shape_box(box,**YOLO_PARAMS)[0].probs.data
   139       983    4723745.0   4805.4      0.0          info("shape_masked")
   140       983 1360258058.0    1e+06      1.3          shape_masked = self.shape_masked(masked,**YOLO_PARAMS)[0].probs.data
   141                                           
   142                                           
   143       983    4763396.0   4845.8      0.0          info("ensemble shape")
   144       983   76302565.0  77622.1      0.1          shape = Tester.average_ensemble([shape_full,shape_box,shape_masked])
   145                                                   
   146       983    2994733.0   3046.5      0.0          return boundary,calcification,direction,shape

  2.09 seconds - /root/autodl-tmp/testB/project/model/Tester.py:16 - __init__
 11.35 seconds - /root/autodl-tmp/testB/project/model/Tester.py:58 - cla_predict
102.58 seconds - /root/autodl-tmp/testB/project/model/Tester.py:91 - fea_predict
