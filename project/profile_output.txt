Timer unit: 1e-09 s

Total time: 2.11516 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: __init__ at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def __init__(self,model_folder_path,format='pt'):
    18         1     329328.0 329328.0      0.0          info("init test")
    19         1 1718421157.0    2e+09     81.2          self.seg_model = FCBFormer().to('cuda') # 实例化FCB模型
    20         1  228912304.0    2e+08     10.8          self.seg_model.load_state_dict(torch.load(os.path.join(model_folder_path,'segmentation','FCB_checkpoint.pt'))) # 加载预训练模型
    21                                                   # 自定义图像转换
    22         2      20184.0  10092.0      0.0          self.transform = transforms.Compose([
    23         1     117467.0 117467.0      0.0              transforms.Resize((352,352),antialias=True),
    24         1      47061.0  47061.0      0.0              transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))
    25                                                   ])
    26         1    9605119.0    1e+07      0.5          self.seg_model.eval()
    27                                           
    28                                           
    29                                                   # 实例化cla所需模型
    30         1     721130.0 721130.0      0.0          self.cla_full = YOLO(os.path.join(model_folder_path,'cla','full.'+format),task=TASK)
    31         1  151070254.0    2e+08      7.1          self.cla_full(**YOLO_PARAMS)
    32         1     544761.0 544761.0      0.0          self.cla_0_1 = YOLO(os.path.join(model_folder_path,'cla','full_2_3.'+format),task=TASK)
    33         1     410052.0 410052.0      0.0          self.cla_01_2345 = YOLO(os.path.join(model_folder_path,'cla','full_23_4A4B4C5.'+format),task=TASK)
    34         1     596716.0 596716.0      0.0          self.cla_2_345 = YOLO(os.path.join(model_folder_path,'cla','full_4A_4B4C5.'+format),task=TASK)
    35         1     401051.0 401051.0      0.0          self.cla_3_45 = YOLO(os.path.join(model_folder_path,'cla','full_4B_4C5.'+format),task=TASK)
    36         1     392554.0 392554.0      0.0          self.cla_4_5 = YOLO(os.path.join(model_folder_path,'cla','full_4C_5.'+format),task=TASK)
    37                                           
    38                                                   # 实例化boudary特征所需模型
    39         1     393545.0 393545.0      0.0          self.boundary_full = YOLO(os.path.join(model_folder_path,'boundary','full.'+format),task=TASK)
    40         1     381373.0 381373.0      0.0          self.boundary_box = YOLO(os.path.join(model_folder_path,'boundary','box.'+format),task=TASK)
    41                                           
    42                                                   # 实例化calcification特征所需模型
    43         1     381364.0 381364.0      0.0          self.calcification_full = YOLO(os.path.join(model_folder_path,'calcification','full.'+format),task=TASK)
    44         1     380191.0 380191.0      0.0          self.calcification_box = YOLO(os.path.join(model_folder_path,'calcification','box.'+format),task=TASK)
    45         1     377462.0 377462.0      0.0          self.calcification_masked = YOLO(os.path.join(model_folder_path,'calcification','masked.'+format),task=TASK)
    46                                           
    47                                                   # 实例化direction特征所需模型
    48         1     379946.0 379946.0      0.0          self.direction_full = YOLO(os.path.join(model_folder_path,'direction','full.'+format),task=TASK)
    49                                           
    50                                                   # 实例化shape特征所需模型
    51         1     376993.0 376993.0      0.0          self.shape_full = YOLO(os.path.join(model_folder_path,'shape','full.'+format),task=TASK)
    52         1     374942.0 374942.0      0.0          self.shape_box = YOLO(os.path.join(model_folder_path,'shape','box.'+format),task=TASK)
    53         1     375455.0 375455.0      0.0          self.shape_masked = YOLO(os.path.join(model_folder_path,'shape','masked.'+format),task=TASK)
    54         1     153079.0 153079.0      0.0          info("finish init")

Total time: 11.787 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: cla_predict at line 57

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                               @torch.no_grad()
    58                                               @profile
    59                                               def cla_predict(self,image):
    60       671   63575431.0  94747.3      0.5          info("cla_predict开始")
    61       671   36767075.0  54794.4      0.3          info("cla读取图像")
    62       671 2088129470.0    3e+06     17.7          origin = cv2.imread(image)
    63       671 4095762749.0    6e+06     34.7          origin = self.cla_full.predictor.preprocess([origin])
    64       671   68861514.0 102625.2      0.6          info("cla_full")
    65       671  849692042.0    1e+06      7.2          cla_full = self.cla_full(origin,**YOLO_PARAMS)[0].probs.data
    66       671   62914825.0  93762.8      0.5          info("cla_01_2345")
    67       671  807737891.0    1e+06      6.9          cla_01_2345__01,cla_01_2345__2345 = self.cla_01_2345(origin,**YOLO_PARAMS)[0].probs.data
    68       671   61807851.0  92113.0      0.5          info("cla_0_1")
    69       671  796080237.0    1e+06      6.8          cla_0_1__0,cla_0_1__1 = self.cla_0_1(origin,**YOLO_PARAMS)[0].probs.data
    70       671   61484067.0  91630.5      0.5          info("cla_2_345")
    71       671  787821569.0    1e+06      6.7          cla_2_345__2,cla_2_345__345 = self.cla_2_345(origin,**YOLO_PARAMS)[0].probs.data
    72       671   61602891.0  91807.6      0.5          info("cla_3_45")
    73       671  773874488.0    1e+06      6.6          cla_3_45__3,cla_3_45__45 = self.cla_3_45(origin,**YOLO_PARAMS)[0].probs.data
    74       671   61937628.0  92306.5      0.5          info("cla_4_5")
    75       671  788200769.0    1e+06      6.7          cla_4_5__4,cla_4_5__5 = self.cla_4_5(origin,**YOLO_PARAMS)[0].probs.data
    76       671   61380380.0  91476.0      0.5          info("bayes")
    77      2013   61235247.0  30419.9      0.5          prob_result = torch.Tensor([
    78       671   14108531.0  21026.1      0.1          cla_01_2345__01 * cla_0_1__0,
    79       671    5111259.0   7617.4      0.0          cla_01_2345__01 * cla_0_1__1,
    80       671    4322055.0   6441.2      0.0          cla_01_2345__2345 * cla_2_345__2,
    81       671    8988111.0  13395.1      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__3,
    82       671   12835698.0  19129.2      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__45 * cla_4_5__4,
    83       671   12427902.0  18521.5      0.1          cla_01_2345__2345 * cla_2_345__345 * cla_3_45__45 * cla_4_5__5,
    84       671   14272125.0  21269.9      0.1          ]).to('cuda')
    85       671   54903440.0  81823.3      0.5          info("ensemble cla")
    86       671   70230020.0 104664.7      0.6          result = Tester.majority_ensemble([cla_full,prob_result])
    87       671     954359.0   1422.3      0.0          return result

Total time: 95.1157 s
File: /root/autodl-tmp/testB/project/model/Tester.py
Function: fea_predict at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               @torch.no_grad()
    91                                               @profile
    92                                               def fea_predict(self, image):
    93       983   97092247.0  98771.4      0.1          info("fea_predict开始")
    94       983   55968320.0  56936.2      0.1          info("fea读取图像")
    95       983 2771763924.0    3e+06      2.9          origin = cv2.imread(image)
    96       983 1205964227.0    1e+06      1.3          origin = torch.Tensor(origin).to("cuda").permute(2,0,1)
    97       983  102274493.0 104043.2      0.1          debug("init origin")
    98       983   65333729.0  66463.6      0.1          debug(origin.shape)
    99       983   61175276.0  62233.2      0.1          debug(origin.device)
   100       983   53193501.0  54113.4      0.1          info("removeFrame")
   101       983 4591391015.0    5e+06      4.8          top,left,h,w = removeFrame(origin)
   102       983   88942738.0  90480.9      0.1          debug("after remove frame")
   103       983   60603903.0  61652.0      0.1          debug(origin.shape)
   104       983   56352864.0  57327.4      0.1          debug(origin.device)
   105       983   16235455.0  16516.2      0.0          cropped = origin[:,top:top+h,left:left+w]
   106       983   52710137.0  53621.7      0.1          debug("init cropped")
   107       983   51090770.0  51974.3      0.1          debug(cropped.shape)
   108       983   50168496.0  51036.1      0.1          debug(cropped.device)
   109       983        5e+10    5e+07     52.8          heatmap = self.seg_model(self.transform(cropped).unsqueeze(0)).sigmoid() # 生成热图
   110       983 2152200921.0    2e+06      2.3          debug(heatmap.max())
   111       983   80140305.0  81526.3      0.1          debug("init heatmap")
   112       983   64014759.0  65121.8      0.1          debug(heatmap.shape)
   113       983   60089996.0  61129.2      0.1          debug(heatmap.device)
   114       983   52839150.0  53753.0      0.1          info("heatmap插值")
   115       983  103712897.0 105506.5      0.1          heatmap = F.interpolate(heatmap,size=(h,w),mode='bilinear',align_corners=False)
   116       983   58430965.0  59441.5      0.1          debug("after interpolate")
   117       983   54649293.0  55594.4      0.1          debug(heatmap.shape)
   118       983   52947618.0  53863.3      0.1          debug(heatmap.device)
   119       983   49749564.0  50609.9      0.1          info("mask")
   120       983  103453739.0 105242.9      0.1          mask = make_mask(heatmap)
   121       983   66915542.0  68072.8      0.1          debug("init mask")
   122       983   55165608.0  56119.6      0.1          debug(mask.shape)
   123       983   53292550.0  54214.2      0.1          debug(mask.device)
   124       983   48610929.0  49451.6      0.1          info("box")
   125       983  100290013.0 102024.4      0.1          box = make_box_map(cropped,mask[0])
   126       983   64917875.0  66040.6      0.1          debug("init box")
   127       983   53940981.0  54873.8      0.1          debug(box.shape)
   128       983   52502151.0  53410.1      0.1          debug(box.device)
   129       983   48771353.0  49614.8      0.1          info("masked")
   130       983   40009130.0  40701.0      0.0          masked = make_masked(heatmap,cropped)
   131       983   54507097.0  55449.7      0.1          debug("init masked")
   132       983   51431185.0  52320.6      0.1          debug(masked.shape)
   133       983   51095550.0  51979.2      0.1          debug(masked.device)
   134       983 7177136743.0    7e+06      7.5          origin = self.cla_full.predictor.preprocess([origin.permute(1,2,0).cpu().numpy().astype(np.uint8)])
   135       983 5691031827.0    6e+06      6.0          box = self.cla_full.predictor.preprocess([box.permute(1,2,0).cpu().numpy().astype(np.uint8)])
   136       983 4858253981.0    5e+06      5.1          masked = self.cla_full.predictor.preprocess([masked.permute(1,2,0).cpu().numpy().astype(np.uint8)])
   137                                           
   138       983  107062745.0 108914.3      0.1          info("boundary_full")
   139       983 1669178274.0    2e+06      1.8          boundary_full = self.boundary_full(origin,**YOLO_PARAMS)[0].probs.data
   140       983   97963304.0  99657.5      0.1          info("boundary_box")
   141       983 1549937643.0    2e+06      1.6          boundary_box = self.boundary_box(box,**YOLO_PARAMS)[0].probs.data
   142       983   95830006.0  97487.3      0.1          info("ensemble boundary")
   143       983   88609498.0  90141.9      0.1          boundary = Tester.max_ensemble([boundary_full,boundary_box])
   144                                           
   145       983   78905000.0  80269.6      0.1          info("calcification_full")
   146       983 1519068853.0    2e+06      1.6          calcification_full = self.calcification_full(origin,**YOLO_PARAMS)[0].probs.data
   147       983   90602638.0  92169.5      0.1          info("calcification_box")
   148       983 1498890884.0    2e+06      1.6          calcification_box = self.calcification_box(box,**YOLO_PARAMS)[0].probs.data
   149       983   92756584.0  94360.7      0.1          info("calcification_masked")
   150       983 1381767680.0    1e+06      1.5          calcification_masked = self.calcification_masked(masked,**YOLO_PARAMS)[0].probs.data
   151       983   92868367.0  94474.4      0.1          info("ensemble calcification")
   152       983  108170734.0 110041.4      0.1          calcification = Tester.majority_ensemble([calcification_full,calcification_box,calcification_masked])
   153                                           
   154       983   80818989.0  82216.7      0.1          info("direction_full")
   155       983 1196335787.0    1e+06      1.3          direction = self.direction_full(origin,**YOLO_PARAMS)[0].probs.top1
   156                                           
   157       983   92159224.0  93753.0      0.1          info("shape_full")
   158       983 1355280488.0    1e+06      1.4          shape_full = self.shape_full(origin,**YOLO_PARAMS)[0].probs.data
   159       983   91798036.0  93385.6      0.1          info("shape_box")
   160       983 1356799108.0    1e+06      1.4          shape_box = self.shape_box(box,**YOLO_PARAMS)[0].probs.data
   161       983   93128648.0  94739.2      0.1          info("shape_masked")
   162       983 1342889533.0    1e+06      1.4          shape_masked = self.shape_masked(masked,**YOLO_PARAMS)[0].probs.data
   163                                           
   164                                           
   165       983   92915400.0  94522.3      0.1          info("ensemble shape")
   166       983   81064021.0  82465.9      0.1          shape = Tester.average_ensemble([shape_full,shape_box,shape_masked])
   167                                                   
   168       983    2915953.0   2966.4      0.0          return boundary,calcification,direction,shape

  2.12 seconds - /root/autodl-tmp/testB/project/model/Tester.py:16 - __init__
 11.79 seconds - /root/autodl-tmp/testB/project/model/Tester.py:57 - cla_predict
 95.12 seconds - /root/autodl-tmp/testB/project/model/Tester.py:90 - fea_predict
